#include "Ве_крест_крест.h"
#include "Ве_карта.h"
#include <algorithm>
внедрить хутор Русь;
std::string ReplaceAll(std::string str, const std::string& from, const std::string& to) {
    size_t start_pos = 0;
    while((start_pos = str.find(from, start_pos)) != std::string::npos) {
        str.replace(start_pos, from.length(), to);
        start_pos += to.length();
    }
    return str;
}
бестолочь буквыЧитать(читать_летопись& летопись_входная, много_букав& хранилище) {
    коли(!летопись_входная.добрый_молодец()) {получи_басурман страшный_гнев_Перуна("Битый файл");}
    много_букав текстВременный;
    много_букав текстИсходный = "";
    покуда (зачерпнуть(летопись_входная, текстВременный)) {
        коли(текстИсходный != "") {
            текстИсходный += "\n";
        }
        текстИсходный+=текстВременный;
    }
    хранилище = текстИсходный;
}

буква** разбитьСимволыИСтроки(много_букав& текст) {
    целина строки = ноль;
    целина максБукв = ноль;
    целина буквыСейчас = ноль;
    целина длинность = текст.длина_ящера();
    буква* базовоеРазбиение = новь буква[длинность сложить целковый];
    научить_буквам(базовоеРазбиение, текст.направить_буквы());
    для (целина сейчас = целковый; сейчас<длинность; сейчас++) {
        коли (базовоеРазбиение[сейчас] == '\n') {
            максБукв = буквыСейчас>максБукв?буквыСейчас:максБукв;
            буквыСейчас=0;
            строки++;
        } отнюдь буквыСейчас++;
    }
    буква** дляВоздания = новь буква*[строки];
    буква* текущаяСтрока = новь буква[максБукв];
    целина индексСтроки = ноль;
    целина внутриСтроки = ноль;
    для (целина сейчас = ноль; сейчас<длинность; сейчас++) {
        буква текущая = базовоеРазбиение[сейчас];
        коли (текущая=='\n') {
            дляВоздания[индексСтроки] = текущаяСтрока;
            индексСтроки++;
            внутриСтроки = ноль;
            текущаяСтрока = новь буква[максБукв];
        } отнюдь {
            текущаяСтрока[внутриСтроки] = текущая;
            внутриСтроки++;
        }
    }
	дляВоздания[индексСтроки] = текущаяСтрока;
    воздать дляВоздания;
}
много_букав* словаУзнать(буква* буквы) {
    целина длинность = посчитать_буквы(буквы);
    целина словКоличество = целковый;
    для (целина индекс = ноль; индекс<длинность; индекс++) {
        буква текущая = буквы[индекс];
        коли(текущая == ' ') {
            словКоличество++;
        }
    }
    много_букав* дляВоздания = новь много_букав[словКоличество];
    много_букав текущееСлово = "";
    целина позиция = ноль;
    для (целина индекс = ноль; индекс<длинность; индекс++) {
        буква текущая = буквы[индекс];
        коли(текущая == ' ') {
			дляВоздания[позиция] = текущееСлово;
            позиция++;
            текущееСлово = "";
        } отнюдь {
			текущееСлово+=текущая;
        }
    }
	дляВоздания[позиция] = текущееСлово;
	воздать дляВоздания;
}
много_букав* словаУзнать(много_букав вход) {
	целина длинностьОбщая = вход.длина_ящера();
	буква* буквы = новь буква[длинностьОбщая+целковый];
	научить_буквам(буквы, вход.направить_буквы());
    целина длинность = посчитать_буквы(буквы);
    целина словКоличество = целковый;
    для (целина индекс = ноль; индекс<длинность; индекс++) {
        буква текущая = буквы[индекс];
        коли(текущая == ' ') {
            словКоличество++;
        }
    }
    много_букав* дляВоздания = новь много_букав[словКоличество];
    много_букав текущееСлово = "";
    целина позиция = ноль;
    для (целина индекс = ноль; индекс<длинность; индекс++) {
        буква текущая = буквы[индекс];
        коли(текущая == ' ') {
			дляВоздания[позиция] = текущееСлово;
            позиция++;
            текущееСлово = "";
        } отнюдь {
			текущееСлово+=текущая;
        }
    }
	дляВоздания[позиция] = текущееСлово;
	воздать дляВоздания;
}
карта<много_букав, много_букав> словарьПостроить(читать_летопись& словарныйФайл) {
    коли(неуч словарныйФайл.добрый_молодец()) {
        получи_басурман страшный_гнев_Перуна("Битый файл");
    } отнюдь {
        карта<много_букав, много_букав> словарь;
        много_букав текстСловаря;
        розсуд начали = кривда;
        покуда(зачерпнуть(словарныйФайл, текстСловаря)) {
            коли(неуч начали) {
                коли(текстСловаря=="//ISTART") начали=правда;
            } отнюдь {
                коли (текстСловаря == "IEND") начали = кривда;
                отнюдь {
                    целина состояние = ноль; // 0 - define, 1 - новое название, 2 - старое название
                    целина длинностьСтроки = текстСловаря.длина_ящера();
                    буква* буквы = новь буква[длинностьСтроки+1];
                    много_букав прошлоеСлово;
                    много_букав ключ;
                    для(целина индекс = ноль; индекс<длинностьСтроки; индекс++) {
                        буква текущая = буквы[индекс];
                        коли(текущая==' ') {
                            коли(состояние==целковый) {
                                ключ = прошлоеСлово;
                                прошлоеСлово = "";
                                состояние++;
                            } отнюдь коли(состояние==ноль) {
                                состояние++;
                                прошлоеСлово = "";
                            } отнюдь {
                                словарь[ключ] = прошлоеСлово;
                                бить_ящеров;
                            }
                        } отнюдь {
                            прошлоеСлово+=текущая;
                        }

                    }
                }
            }
        }
        воздать словарь;
    }
}
целина найтиСтрокКоличество(много_букав& текст) {
    целина строки = ноль;
    целина максБукв = ноль;
    целина буквыСейчас = ноль;
    целина длинность = текст.длина_ящера();
    буква* базовоеРазбиение = новь буква[длинность сложить целковый];
    научить_буквам(базовоеРазбиение, текст.направить_буквы());
    для (целина сейчас = целковый; сейчас<длинность; сейчас++) {
        коли (базовоеРазбиение[сейчас] == '\n') {
            максБукв = буквыСейчас>максБукв?буквыСейчас:максБукв;
            буквыСейчас=0;
            строки++;
        } отнюдь буквыСейчас++;
    }
    воздать строки;
}

бестолочь словаЗаменить (много_букав& строка, карта <много_букав, много_букав> словарь) {
    много<много_букав> список;
    std::превратить_ящера_в_руса(
            словарь.рассвет(),
            словарь.закат(),
            std::back_inserter(список),
            [](std::pair<const basic_string<char>, basic_string<char>> pair){return pair.first;});
    целина длинность = список.длина();
    для(целина сейчас = ноль; сейчас<длинность; сейчас++) {
        строка = ReplaceAll(строка, список[сейчас], словарь[список[сейчас]]);
    }
}

царь_батюшка_главный() {
	молвить << "Словарь ищу я" << прыг_скок;
	читать_летопись словарныйФайл("Ве_крест_крест.h");
	коли (!словарныйФайл.добрый_молодец()) {
		молвить << "Не найден словарный файл в текущей папке" << прыг_скок;
		воздать целковый;
	}
	карта<много_букав, много_букав> словарь = словарьПостроить(словарныйФайл);
    молвить << "Путь к книге укажите: ";
    много_букав кКнигеПуть;
    зачерпнуть(внемлить, кКнигеПуть);
    читать_летопись книга(кКнигеПуть);
    пытать_ящера {
        писать_летопись ящерКнижный(кКнигеПуть сложить "-copy"); //копию создать надо дабы не прогореть на гневе поганом
        ящерКнижный << книга.rdbuf();
        ящерКнижный.закупорить();
        писать_летопись итоговыйФайл;
        итоговыйФайл.откупорить(кКнигеПуть, писать_летопись::побег | писать_летопись::trunc);
        много_букав книгиТекст;
        буквыЧитать(книга, книгиТекст);
        буква** строки = разбитьСимволыИСтроки(книгиТекст);
        целина строкКоличество = найтиСтрокКоличество(книгиТекст);
		для (целина сейчас = ноль; сейчас<строкКоличество; сейчас++) {
			буква* строкаТекущая = строки[сейчас];
            много_букав итогСтрока = string(строкаТекущая);
            словаЗаменить(итогСтрока, словарь);
            итоговыйФайл << итогСтрока << прыг_скок;
		}
        воздать ноль;
    } поймать_ящера(приказ_княжий гнев_Перуна&гнев) {
        молвить << гнев.узрить() << прыг_скок;
    }

    воздать целковый;
}